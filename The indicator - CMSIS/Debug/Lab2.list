
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000810  08000818  00010818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000810  08000810  00010818  2**0
                  CONTENTS
  4 .ARM          00000000  08000810  08000810  00010818  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000810  08000818  00010818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000810  08000810  00010810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000814  08000814  00010814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000818  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000818  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010818  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a19  00000000  00000000  00010841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001e9  00000000  00000000  0001125a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00011448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  000114d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff98  00000000  00000000  00011550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007b4  00000000  00000000  000214e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054e58  00000000  00000000  00021c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00076af4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000184  00000000  00000000  00076b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080007f8 	.word	0x080007f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080007f8 	.word	0x080007f8

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	; (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	; (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <init_portC>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void init_portC(void)			/* не меняем */
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN; /*вкл тактирование порта с*/
 8000200:	4b34      	ldr	r3, [pc, #208]	; (80002d4 <init_portC+0xd8>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a33      	ldr	r2, [pc, #204]	; (80002d4 <init_portC+0xd8>)
 8000206:	f043 0310 	orr.w	r3, r3, #16
 800020a:	6193      	str	r3, [r2, #24]

	GPIOC->CRL &= ~(GPIO_CRL_CNF0|GPIO_CRL_MODE0); /*зануляем биты CRL (0000)*/
 800020c:	4b32      	ldr	r3, [pc, #200]	; (80002d8 <init_portC+0xdc>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a31      	ldr	r2, [pc, #196]	; (80002d8 <init_portC+0xdc>)
 8000212:	f023 030f 	bic.w	r3, r3, #15
 8000216:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE0; /*ставим маску 1100 - 50MHz analog mode*/
 8000218:	4b2f      	ldr	r3, [pc, #188]	; (80002d8 <init_portC+0xdc>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a2e      	ldr	r2, [pc, #184]	; (80002d8 <init_portC+0xdc>)
 800021e:	f043 0303 	orr.w	r3, r3, #3
 8000222:	6013      	str	r3, [r2, #0]

	GPIOC->CRL &= ~(GPIO_CRL_CNF1|GPIO_CRL_MODE1);
 8000224:	4b2c      	ldr	r3, [pc, #176]	; (80002d8 <init_portC+0xdc>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <init_portC+0xdc>)
 800022a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800022e:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE1;
 8000230:	4b29      	ldr	r3, [pc, #164]	; (80002d8 <init_portC+0xdc>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a28      	ldr	r2, [pc, #160]	; (80002d8 <init_portC+0xdc>)
 8000236:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800023a:	6013      	str	r3, [r2, #0]

	GPIOC->CRL &= ~(GPIO_CRL_CNF2|GPIO_CRL_MODE2);
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <init_portC+0xdc>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a25      	ldr	r2, [pc, #148]	; (80002d8 <init_portC+0xdc>)
 8000242:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000246:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE2;
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <init_portC+0xdc>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <init_portC+0xdc>)
 800024e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000252:	6013      	str	r3, [r2, #0]

	GPIOC->CRL &= ~(GPIO_CRL_CNF3|GPIO_CRL_MODE3);
 8000254:	4b20      	ldr	r3, [pc, #128]	; (80002d8 <init_portC+0xdc>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a1f      	ldr	r2, [pc, #124]	; (80002d8 <init_portC+0xdc>)
 800025a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800025e:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE3;
 8000260:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <init_portC+0xdc>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a1c      	ldr	r2, [pc, #112]	; (80002d8 <init_portC+0xdc>)
 8000266:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800026a:	6013      	str	r3, [r2, #0]

	GPIOC->CRL &= ~(GPIO_CRL_CNF4|GPIO_CRL_MODE4);
 800026c:	4b1a      	ldr	r3, [pc, #104]	; (80002d8 <init_portC+0xdc>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <init_portC+0xdc>)
 8000272:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000276:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE4;
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <init_portC+0xdc>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a16      	ldr	r2, [pc, #88]	; (80002d8 <init_portC+0xdc>)
 800027e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000282:	6013      	str	r3, [r2, #0]

	GPIOC->CRL &= ~(GPIO_CRL_CNF5|GPIO_CRL_MODE5);
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <init_portC+0xdc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <init_portC+0xdc>)
 800028a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE5;
 8000290:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <init_portC+0xdc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a10      	ldr	r2, [pc, #64]	; (80002d8 <init_portC+0xdc>)
 8000296:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800029a:	6013      	str	r3, [r2, #0]

	GPIOC->CRL &= ~(GPIO_CRL_CNF6|GPIO_CRL_MODE6);
 800029c:	4b0e      	ldr	r3, [pc, #56]	; (80002d8 <init_portC+0xdc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <init_portC+0xdc>)
 80002a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE6;
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <init_portC+0xdc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <init_portC+0xdc>)
 80002ae:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80002b2:	6013      	str	r3, [r2, #0]

	GPIOC->CRL &= ~(GPIO_CRL_CNF7|GPIO_CRL_MODE7);
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <init_portC+0xdc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <init_portC+0xdc>)
 80002ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOC->CRL |= GPIO_CRL_MODE7;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <init_portC+0xdc>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <init_portC+0xdc>)
 80002c6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80002ca:	6013      	str	r3, [r2, #0]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40011000 	.word	0x40011000

080002dc <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			//Сброс флага переполнения
 80002e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ea:	f023 0301 	bic.w	r3, r3, #1
 80002ee:	6113      	str	r3, [r2, #16]

	if (count == 15) {
 80002f0:	4b08      	ldr	r3, [pc, #32]	; (8000314 <TIM2_IRQHandler+0x38>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b0f      	cmp	r3, #15
 80002f6:	d103      	bne.n	8000300 <TIM2_IRQHandler+0x24>
		count = 0;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <TIM2_IRQHandler+0x38>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
	}
	else count ++;
}
 80002fe:	e004      	b.n	800030a <TIM2_IRQHandler+0x2e>
	else count ++;
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <TIM2_IRQHandler+0x38>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	3301      	adds	r3, #1
 8000306:	4a03      	ldr	r2, [pc, #12]	; (8000314 <TIM2_IRQHandler+0x38>)
 8000308:	6013      	str	r3, [r2, #0]
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	2000001c 	.word	0x2000001c

08000318 <EXTI15_10_IRQHandler>:
  * @retval None
  */


void EXTI15_10_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	// Т.к. этот обработчик вызывается, если произшло одно из прерываний EXTI15-EXI10,
	// нужно проверить, кто из них его вызвал.
	if (EXTI->PR & EXTI_PR_PR13) 		// нас интересует EXTI13
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <EXTI15_10_IRQHandler+0x38>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000324:	2b00      	cmp	r3, #0
 8000326:	d011      	beq.n	800034c <EXTI15_10_IRQHandler+0x34>
	{
		EXTI->PR |= EXTI_PR_PR13;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <EXTI15_10_IRQHandler+0x38>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a08      	ldr	r2, [pc, #32]	; (8000350 <EXTI15_10_IRQHandler+0x38>)
 800032e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000332:	6153      	str	r3, [r2, #20]
		delay(10000);					//Задержка для защиты от дребезга контактов
 8000334:	f242 7010 	movw	r0, #10000	; 0x2710
 8000338:	f000 f9fc 	bl	8000734 <delay>
		TIM2->CR1 ^= TIM_CR1_CEN;		//Инвертируем состояние таймера
 800033c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000346:	f083 0301 	eor.w	r3, r3, #1
 800034a:	6013      	str	r3, [r2, #0]
	}
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40010400 	.word	0x40010400

08000354 <initButton>:



void initButton(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	//Включить тактирование порта GPIOC и альтернативных функций
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 8000358:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <initButton+0x6c>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <initButton+0x6c>)
 800035e:	f043 0311 	orr.w	r3, r3, #17
 8000362:	6193      	str	r3, [r2, #24]

	/* Настраиваем PC13 на вход, альтернативная функция */
	// Сбрасываем биты конфигурации порта...
	GPIOC->CRH &= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <initButton+0x70>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <initButton+0x70>)
 800036a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800036e:	6053      	str	r3, [r2, #4]
	//...и выставляем так, как нам нужно
	GPIOC->CRH |= GPIO_CRH_CNF13_1;			//Вход с подтяжкой
 8000370:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <initButton+0x70>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <initButton+0x70>)
 8000376:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800037a:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR |= GPIO_BSRR_BS13;			//Подтяжка к Vdd
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <initButton+0x70>)
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <initButton+0x70>)
 8000382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000386:	6113      	str	r3, [r2, #16]

	// Настройка альтернативных фукнций портов.
	// Настройки портов с 12 по 15 хранятся в регистре AFIO_EXTICR4.
	// Регистры объединены в массив AFIO->EXTICR, нумерация массива начинается с нулевого элемента.
	// Поэтому настройки AFIO_EXTICR4 хранятся в AFIO->EXTICR[3]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <initButton+0x74>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <initButton+0x74>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6153      	str	r3, [r2, #20]

	EXTI->FTSR |= EXTI_FTSR_TR13;			//Прерывание по спаду импульса (при нажатии на кнопку)
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <initButton+0x78>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a0c      	ldr	r2, [pc, #48]	; (80003cc <initButton+0x78>)
 800039a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR13;				//Выставляем маску - EXTI13
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <initButton+0x78>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a09      	ldr	r2, [pc, #36]	; (80003cc <initButton+0x78>)
 80003a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003aa:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(EXTI15_10_IRQn);			//Разрешаем прерывание
 80003ac:	2028      	movs	r0, #40	; 0x28
 80003ae:	f7ff fedf 	bl	8000170 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 0);	//Выставляем приоритет
 80003b2:	2100      	movs	r1, #0
 80003b4:	2028      	movs	r0, #40	; 0x28
 80003b6:	f7ff fef7 	bl	80001a8 <__NVIC_SetPriority>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40011000 	.word	0x40011000
 80003c8:	40010000 	.word	0x40010000
 80003cc:	40010400 	.word	0x40010400

080003d0 <initTIM2>:



void initTIM2(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;		//Включить тактирование TIM6
 80003d4:	4b14      	ldr	r3, [pc, #80]	; (8000428 <initTIM2+0x58>)
 80003d6:	69db      	ldr	r3, [r3, #28]
 80003d8:	4a13      	ldr	r2, [pc, #76]	; (8000428 <initTIM2+0x58>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	61d3      	str	r3, [r2, #28]

	//Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
	TIM2->PSC = 64000-1;					//Предделитель частоты (64МГц/64000 = 1кГц)
 80003e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e4:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80003e8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000-1;						//Модуль счёта таймера (1кГц/1000 = 1с)
 80003ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80003f2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= TIM_DIER_UIE;				//Разрешить прерывание по переполнению таймера
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;				//Включить таймер
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn);				//Рарзрешить прерывание от TIM2
 8000414:	201c      	movs	r0, #28
 8000416:	f7ff feab 	bl	8000170 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);			//Выставляем приоритет
 800041a:	2101      	movs	r1, #1
 800041c:	201c      	movs	r0, #28
 800041e:	f7ff fec3 	bl	80001a8 <__NVIC_SetPriority>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <initClk>:


                                    /* не меняем */
void initClk(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 8000430:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <initClk+0xc0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a2d      	ldr	r2, [pc, #180]	; (80004ec <initClk+0xc0>)
 8000436:	f043 0301 	orr.w	r3, r3, #1
 800043a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 800043c:	bf00      	nop
 800043e:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <initClk+0xc0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f003 0302 	and.w	r3, r3, #2
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0f9      	beq.n	800043e <initClk+0x12>

	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800044a:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <initClk+0xc4>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a28      	ldr	r2, [pc, #160]	; (80004f0 <initClk+0xc4>)
 8000450:	f043 0310 	orr.w	r3, r3, #16
 8000454:	6013      	str	r3, [r2, #0]

	// Flash 2 wait state
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000456:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <initClk+0xc4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a25      	ldr	r2, [pc, #148]	; (80004f0 <initClk+0xc4>)
 800045c:	f023 0307 	bic.w	r3, r3, #7
 8000460:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000462:	4b23      	ldr	r3, [pc, #140]	; (80004f0 <initClk+0xc4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a22      	ldr	r2, [pc, #136]	; (80004f0 <initClk+0xc4>)
 8000468:	f043 0304 	orr.w	r3, r3, #4
 800046c:	6013      	str	r3, [r2, #0]

	// HCLK = SYSCLK
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800046e:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <initClk+0xc0>)
 8000470:	4a1e      	ldr	r2, [pc, #120]	; (80004ec <initClk+0xc0>)
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	6053      	str	r3, [r2, #4]

	// PCLK2 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000476:	4b1d      	ldr	r3, [pc, #116]	; (80004ec <initClk+0xc0>)
 8000478:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <initClk+0xc0>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	6053      	str	r3, [r2, #4]

	// PCLK1 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800047e:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <initClk+0xc0>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	4a1a      	ldr	r2, [pc, #104]	; (80004ec <initClk+0xc0>)
 8000484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000488:	6053      	str	r3, [r2, #4]

	// PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 800048a:	4b18      	ldr	r3, [pc, #96]	; (80004ec <initClk+0xc0>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	4a17      	ldr	r2, [pc, #92]	; (80004ec <initClk+0xc0>)
 8000490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000494:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <initClk+0xc0>)
 8000498:	685b      	ldr	r3, [r3, #4]
 800049a:	4a14      	ldr	r2, [pc, #80]	; (80004ec <initClk+0xc0>)
 800049c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80004a0:	6053      	str	r3, [r2, #4]

	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <initClk+0xc0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a11      	ldr	r2, [pc, #68]	; (80004ec <initClk+0xc0>)
 80004a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ac:	6013      	str	r3, [r2, #0]

	// Wait till PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 80004ae:	bf00      	nop
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <initClk+0xc0>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d0f9      	beq.n	80004b0 <initClk+0x84>

	// Select PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <initClk+0xc0>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <initClk+0xc0>)
 80004c2:	f023 0303 	bic.w	r3, r3, #3
 80004c6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <initClk+0xc0>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	4a07      	ldr	r2, [pc, #28]	; (80004ec <initClk+0xc0>)
 80004ce:	f043 0302 	orr.w	r3, r3, #2
 80004d2:	6053      	str	r3, [r2, #4]

	// Wait till PLL is used as system clock source
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
 80004d4:	bf00      	nop
 80004d6:	4b05      	ldr	r3, [pc, #20]	; (80004ec <initClk+0xc0>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	f003 030c 	and.w	r3, r3, #12
 80004de:	2b08      	cmp	r3, #8
 80004e0:	d1f9      	bne.n	80004d6 <initClk+0xaa>
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40022000 	.word	0x40022000

080004f4 <main>:



int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	init_portC();
 80004f8:	f7ff fe80 	bl	80001fc <init_portC>
	initClk();
 80004fc:	f7ff ff96 	bl	800042c <initClk>
	initButton();
 8000500:	f7ff ff28 	bl	8000354 <initButton>
	initTIM2();
 8000504:	f7ff ff64 	bl	80003d0 <initTIM2>
	while(true)
	{
        //попробуй вынести в *.h !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		//GPIOC->ODR &= ~(GPIO_ODR_ODR0|GPIO_ODR_ODR1|GPIO_ODR_ODR2|GPIO_ODR_ODR3|GPIO_ODR_ODR4|GPIO_ODR_ODR5|GPIO_ODR_ODR6|GPIO_ODR_ODR7);

        if (count == 0) {
 8000508:	4b88      	ldr	r3, [pc, #544]	; (800072c <main+0x238>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d10c      	bne.n	800052a <main+0x36>
            reset();
 8000510:	4b87      	ldr	r3, [pc, #540]	; (8000730 <main+0x23c>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a86      	ldr	r2, [pc, #536]	; (8000730 <main+0x23c>)
 8000516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800051a:	60d3      	str	r3, [r2, #12]
            disp_0();
 800051c:	4b84      	ldr	r3, [pc, #528]	; (8000730 <main+0x23c>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a83      	ldr	r2, [pc, #524]	; (8000730 <main+0x23c>)
 8000522:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000526:	60d3      	str	r3, [r2, #12]
 8000528:	e7ee      	b.n	8000508 <main+0x14>
        }

        else if (count == 1) {
 800052a:	4b80      	ldr	r3, [pc, #512]	; (800072c <main+0x238>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10c      	bne.n	800054c <main+0x58>
        	reset();
 8000532:	4b7f      	ldr	r3, [pc, #508]	; (8000730 <main+0x23c>)
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	4a7e      	ldr	r2, [pc, #504]	; (8000730 <main+0x23c>)
 8000538:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800053c:	60d3      	str	r3, [r2, #12]
        	disp_1();
 800053e:	4b7c      	ldr	r3, [pc, #496]	; (8000730 <main+0x23c>)
 8000540:	68db      	ldr	r3, [r3, #12]
 8000542:	4a7b      	ldr	r2, [pc, #492]	; (8000730 <main+0x23c>)
 8000544:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8000548:	60d3      	str	r3, [r2, #12]
 800054a:	e7dd      	b.n	8000508 <main+0x14>
            //reset ();
        }

        else if (count == 2) {
 800054c:	4b77      	ldr	r3, [pc, #476]	; (800072c <main+0x238>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b02      	cmp	r3, #2
 8000552:	d10c      	bne.n	800056e <main+0x7a>
        	reset();
 8000554:	4b76      	ldr	r3, [pc, #472]	; (8000730 <main+0x23c>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4a75      	ldr	r2, [pc, #468]	; (8000730 <main+0x23c>)
 800055a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800055e:	60d3      	str	r3, [r2, #12]
        	disp_2();
 8000560:	4b73      	ldr	r3, [pc, #460]	; (8000730 <main+0x23c>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a72      	ldr	r2, [pc, #456]	; (8000730 <main+0x23c>)
 8000566:	f043 035b 	orr.w	r3, r3, #91	; 0x5b
 800056a:	60d3      	str	r3, [r2, #12]
 800056c:	e7cc      	b.n	8000508 <main+0x14>
            //reset ();
        }

        else if (count == 3) {
 800056e:	4b6f      	ldr	r3, [pc, #444]	; (800072c <main+0x238>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b03      	cmp	r3, #3
 8000574:	d10c      	bne.n	8000590 <main+0x9c>
        	reset();
 8000576:	4b6e      	ldr	r3, [pc, #440]	; (8000730 <main+0x23c>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	4a6d      	ldr	r2, [pc, #436]	; (8000730 <main+0x23c>)
 800057c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000580:	60d3      	str	r3, [r2, #12]
        	disp_3();
 8000582:	4b6b      	ldr	r3, [pc, #428]	; (8000730 <main+0x23c>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	4a6a      	ldr	r2, [pc, #424]	; (8000730 <main+0x23c>)
 8000588:	f043 0373 	orr.w	r3, r3, #115	; 0x73
 800058c:	60d3      	str	r3, [r2, #12]
 800058e:	e7bb      	b.n	8000508 <main+0x14>
            //reset ();
        }

        else if (count == 4) {
 8000590:	4b66      	ldr	r3, [pc, #408]	; (800072c <main+0x238>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b04      	cmp	r3, #4
 8000596:	d10c      	bne.n	80005b2 <main+0xbe>
        	reset();
 8000598:	4b65      	ldr	r3, [pc, #404]	; (8000730 <main+0x23c>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a64      	ldr	r2, [pc, #400]	; (8000730 <main+0x23c>)
 800059e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005a2:	60d3      	str	r3, [r2, #12]
        	disp_4();
 80005a4:	4b62      	ldr	r3, [pc, #392]	; (8000730 <main+0x23c>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a61      	ldr	r2, [pc, #388]	; (8000730 <main+0x23c>)
 80005aa:	f043 0365 	orr.w	r3, r3, #101	; 0x65
 80005ae:	60d3      	str	r3, [r2, #12]
 80005b0:	e7aa      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 5) {
 80005b2:	4b5e      	ldr	r3, [pc, #376]	; (800072c <main+0x238>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b05      	cmp	r3, #5
 80005b8:	d10c      	bne.n	80005d4 <main+0xe0>
        	reset();
 80005ba:	4b5d      	ldr	r3, [pc, #372]	; (8000730 <main+0x23c>)
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4a5c      	ldr	r2, [pc, #368]	; (8000730 <main+0x23c>)
 80005c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005c4:	60d3      	str	r3, [r2, #12]
        	disp_5();
 80005c6:	4b5a      	ldr	r3, [pc, #360]	; (8000730 <main+0x23c>)
 80005c8:	68db      	ldr	r3, [r3, #12]
 80005ca:	4a59      	ldr	r2, [pc, #356]	; (8000730 <main+0x23c>)
 80005cc:	f043 0376 	orr.w	r3, r3, #118	; 0x76
 80005d0:	60d3      	str	r3, [r2, #12]
 80005d2:	e799      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 6) {
 80005d4:	4b55      	ldr	r3, [pc, #340]	; (800072c <main+0x238>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b06      	cmp	r3, #6
 80005da:	d10c      	bne.n	80005f6 <main+0x102>
        	reset();
 80005dc:	4b54      	ldr	r3, [pc, #336]	; (8000730 <main+0x23c>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a53      	ldr	r2, [pc, #332]	; (8000730 <main+0x23c>)
 80005e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80005e6:	60d3      	str	r3, [r2, #12]
        	disp_6();
 80005e8:	4b51      	ldr	r3, [pc, #324]	; (8000730 <main+0x23c>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a50      	ldr	r2, [pc, #320]	; (8000730 <main+0x23c>)
 80005ee:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
 80005f2:	60d3      	str	r3, [r2, #12]
 80005f4:	e788      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 7) {
 80005f6:	4b4d      	ldr	r3, [pc, #308]	; (800072c <main+0x238>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d10c      	bne.n	8000618 <main+0x124>
        	reset();
 80005fe:	4b4c      	ldr	r3, [pc, #304]	; (8000730 <main+0x23c>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a4b      	ldr	r2, [pc, #300]	; (8000730 <main+0x23c>)
 8000604:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000608:	60d3      	str	r3, [r2, #12]
        	disp_7();
 800060a:	4b49      	ldr	r3, [pc, #292]	; (8000730 <main+0x23c>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	4a48      	ldr	r2, [pc, #288]	; (8000730 <main+0x23c>)
 8000610:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8000614:	60d3      	str	r3, [r2, #12]
 8000616:	e777      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 8) {
 8000618:	4b44      	ldr	r3, [pc, #272]	; (800072c <main+0x238>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d10c      	bne.n	800063a <main+0x146>
        	reset();
 8000620:	4b43      	ldr	r3, [pc, #268]	; (8000730 <main+0x23c>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	4a42      	ldr	r2, [pc, #264]	; (8000730 <main+0x23c>)
 8000626:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800062a:	60d3      	str	r3, [r2, #12]
        	disp_8();
 800062c:	4b40      	ldr	r3, [pc, #256]	; (8000730 <main+0x23c>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a3f      	ldr	r2, [pc, #252]	; (8000730 <main+0x23c>)
 8000632:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000636:	60d3      	str	r3, [r2, #12]
 8000638:	e766      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 9) {
 800063a:	4b3c      	ldr	r3, [pc, #240]	; (800072c <main+0x238>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2b09      	cmp	r3, #9
 8000640:	d10c      	bne.n	800065c <main+0x168>
        	reset();
 8000642:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <main+0x23c>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	4a3a      	ldr	r2, [pc, #232]	; (8000730 <main+0x23c>)
 8000648:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800064c:	60d3      	str	r3, [r2, #12]
        	disp_9();
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <main+0x23c>)
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <main+0x23c>)
 8000654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8000658:	60d3      	str	r3, [r2, #12]
 800065a:	e755      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 10) {
 800065c:	4b33      	ldr	r3, [pc, #204]	; (800072c <main+0x238>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b0a      	cmp	r3, #10
 8000662:	d10c      	bne.n	800067e <main+0x18a>
        	reset();
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <main+0x23c>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	4a31      	ldr	r2, [pc, #196]	; (8000730 <main+0x23c>)
 800066a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800066e:	60d3      	str	r3, [r2, #12]
        	disp_10();
 8000670:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <main+0x23c>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	4a2e      	ldr	r2, [pc, #184]	; (8000730 <main+0x23c>)
 8000676:	f043 036f 	orr.w	r3, r3, #111	; 0x6f
 800067a:	60d3      	str	r3, [r2, #12]
 800067c:	e744      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 11) {
 800067e:	4b2b      	ldr	r3, [pc, #172]	; (800072c <main+0x238>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b0b      	cmp	r3, #11
 8000684:	d10c      	bne.n	80006a0 <main+0x1ac>
        	reset();
 8000686:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <main+0x23c>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	4a29      	ldr	r2, [pc, #164]	; (8000730 <main+0x23c>)
 800068c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000690:	60d3      	str	r3, [r2, #12]
        	disp_11();
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <main+0x23c>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	4a26      	ldr	r2, [pc, #152]	; (8000730 <main+0x23c>)
 8000698:	f043 037c 	orr.w	r3, r3, #124	; 0x7c
 800069c:	60d3      	str	r3, [r2, #12]
 800069e:	e733      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 12) {
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <main+0x238>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b0c      	cmp	r3, #12
 80006a6:	d10c      	bne.n	80006c2 <main+0x1ce>
        	reset();
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <main+0x23c>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <main+0x23c>)
 80006ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80006b2:	60d3      	str	r3, [r2, #12]
        	disp_12();
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <main+0x23c>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <main+0x23c>)
 80006ba:	f043 031e 	orr.w	r3, r3, #30
 80006be:	60d3      	str	r3, [r2, #12]
 80006c0:	e722      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 13) {
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <main+0x238>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b0d      	cmp	r3, #13
 80006c8:	d10c      	bne.n	80006e4 <main+0x1f0>
        	reset();
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <main+0x23c>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <main+0x23c>)
 80006d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80006d4:	60d3      	str	r3, [r2, #12]
        	disp_13();
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <main+0x23c>)
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	4a15      	ldr	r2, [pc, #84]	; (8000730 <main+0x23c>)
 80006dc:	f043 0379 	orr.w	r3, r3, #121	; 0x79
 80006e0:	60d3      	str	r3, [r2, #12]
 80006e2:	e711      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 14) {
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <main+0x238>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b0e      	cmp	r3, #14
 80006ea:	d10c      	bne.n	8000706 <main+0x212>
        	reset();
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <main+0x23c>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <main+0x23c>)
 80006f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80006f6:	60d3      	str	r3, [r2, #12]
        	disp_14();
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <main+0x23c>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	4a0c      	ldr	r2, [pc, #48]	; (8000730 <main+0x23c>)
 80006fe:	f043 035e 	orr.w	r3, r3, #94	; 0x5e
 8000702:	60d3      	str	r3, [r2, #12]
 8000704:	e700      	b.n	8000508 <main+0x14>
        	//reset ();
        }

        else if (count == 15) {
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <main+0x238>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b0f      	cmp	r3, #15
 800070c:	f47f aefc 	bne.w	8000508 <main+0x14>
        	reset();
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <main+0x23c>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	4a06      	ldr	r2, [pc, #24]	; (8000730 <main+0x23c>)
 8000716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800071a:	60d3      	str	r3, [r2, #12]
        	disp_15();
 800071c:	4b04      	ldr	r3, [pc, #16]	; (8000730 <main+0x23c>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	4a03      	ldr	r2, [pc, #12]	; (8000730 <main+0x23c>)
 8000722:	f043 034e 	orr.w	r3, r3, #78	; 0x4e
 8000726:	60d3      	str	r3, [r2, #12]
        if (count == 0) {
 8000728:	e6ee      	b.n	8000508 <main+0x14>
 800072a:	bf00      	nop
 800072c:	2000001c 	.word	0x2000001c
 8000730:	40011000 	.word	0x40011000

08000734 <delay>:

	}
}

void delay(uint32_t value)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0;i<value;i++);
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	e002      	b.n	8000748 <delay+0x14>
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3301      	adds	r3, #1
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3f8      	bcc.n	8000742 <delay+0xe>
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078a:	f000 f811 	bl	80007b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff feb1 	bl	80004f4 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007a0:	08000818 	.word	0x08000818
  ldr r2, =_sbss
 80007a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007a8:	20000020 	.word	0x20000020

080007ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC1_2_IRQHandler>
	...

080007b0 <__libc_init_array>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	2600      	movs	r6, #0
 80007b4:	4d0c      	ldr	r5, [pc, #48]	; (80007e8 <__libc_init_array+0x38>)
 80007b6:	4c0d      	ldr	r4, [pc, #52]	; (80007ec <__libc_init_array+0x3c>)
 80007b8:	1b64      	subs	r4, r4, r5
 80007ba:	10a4      	asrs	r4, r4, #2
 80007bc:	42a6      	cmp	r6, r4
 80007be:	d109      	bne.n	80007d4 <__libc_init_array+0x24>
 80007c0:	f000 f81a 	bl	80007f8 <_init>
 80007c4:	2600      	movs	r6, #0
 80007c6:	4d0a      	ldr	r5, [pc, #40]	; (80007f0 <__libc_init_array+0x40>)
 80007c8:	4c0a      	ldr	r4, [pc, #40]	; (80007f4 <__libc_init_array+0x44>)
 80007ca:	1b64      	subs	r4, r4, r5
 80007cc:	10a4      	asrs	r4, r4, #2
 80007ce:	42a6      	cmp	r6, r4
 80007d0:	d105      	bne.n	80007de <__libc_init_array+0x2e>
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d8:	4798      	blx	r3
 80007da:	3601      	adds	r6, #1
 80007dc:	e7ee      	b.n	80007bc <__libc_init_array+0xc>
 80007de:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e2:	4798      	blx	r3
 80007e4:	3601      	adds	r6, #1
 80007e6:	e7f2      	b.n	80007ce <__libc_init_array+0x1e>
 80007e8:	08000810 	.word	0x08000810
 80007ec:	08000810 	.word	0x08000810
 80007f0:	08000810 	.word	0x08000810
 80007f4:	08000814 	.word	0x08000814

080007f8 <_init>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	bf00      	nop
 80007fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	469e      	mov	lr, r3
 8000802:	4770      	bx	lr

08000804 <_fini>:
 8000804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000806:	bf00      	nop
 8000808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080a:	bc08      	pop	{r3}
 800080c:	469e      	mov	lr, r3
 800080e:	4770      	bx	lr
